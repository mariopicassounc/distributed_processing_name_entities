import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.sql.SparkSession;

import java.util.Arrays;
import java.util.List;

public class NamedEntityCount {
    public static void main(String[] args) {
        // Configurar Spark
        SparkSession spark = SparkSession.builder()
                .appName("NamedEntityCount")
                .master("local[*]")  // Usar todos los núcleos disponibles localmente
                .getOrCreate();

        JavaSparkContext sparkContext = new JavaSparkContext(spark.sparkContext());

        // Crear un RDD de ejemplo con el contenido del feed
        List<String> feedContent = Arrays.asList(
                "Apple is launching a new product.",
                "Google and Amazon are competing in the market.",
                "Microsoft announced its latest software release."
        );
        JavaRDD<String> feedRDD = sparkContext.parallelize(feedContent);

        // Contar las palabras en el feed
        JavaRDD<String> wordsRDD = feedRDD.flatMap(line -> Arrays.asList(line.split(" ")).iterator());
        JavaRDD<String> namedEntitiesRDD = wordsRDD.filter(word -> isNamedEntity(word));  // Filtrar las entidades nombradas
        JavaRDD<String> countedEntitiesRDD = namedEntitiesRDD.mapToPair(word -> new Tuple2<>(word, 1))
                .reduceByKey(Integer::sum)
                .map(pair -> pair._1 + ": " + pair._2);  // Mapear a pares (palabra, conteo) y sumar los conteos

        // Ordenar las entidades nombradas según el conteo
        List<String> sortedEntities = countedEntitiesRDD.sortBy(entity -> {
            int count = Integer.parseInt(entity.split(": ")[1]);
            return count;
        }, false, 1).collect();

        // Imprimir los resultados
        for (String entity : sortedEntities) {
            System.out.println(entity);
        }

        // Detener Spark
        spark.stop();
    }

    private static boolean isNamedEntity(String word) {
        // Implementa tu lógica para determinar si una palabra es una entidad nombrada
        // Puedes usar librerías de procesamiento de lenguaje natural como Stanford NLP o OpenNLP para esta tarea
        // Aquí, simplemente verificamos si la palabra comienza con una letra mayúscula
        return Character.isUpperCase(word.charAt(0));
    }
}

